# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pundit/all/pundit.rbi
#
# pundit-2.3.2

module Pundit
  def self.authorize(user, record, query, policy_class: nil, cache: nil); end
  def self.included(base); end
  def self.policy!(user, *args, **kwargs, &block); end
  def self.policy(user, *args, **kwargs, &block); end
  def self.policy_scope!(user, *args, **kwargs, &block); end
  def self.policy_scope(user, *args, **kwargs, &block); end
end
class Pundit::PolicyFinder
  def find(subject); end
  def find_class_name(subject); end
  def initialize(object); end
  def object; end
  def param_key; end
  def policy!; end
  def policy; end
  def scope!; end
  def scope; end
end
module Pundit::Authorization
  def authorize(record, query = nil, policy_class: nil); end
  def permitted_attributes(record, action = nil); end
  def policies; end
  def policy(record); end
  def policy_scope(scope, policy_scope_class: nil); end
  def policy_scopes; end
  def pundit; end
  def pundit_params_for(record); end
  def pundit_policy_authorized?; end
  def pundit_policy_scope(scope); end
  def pundit_policy_scoped?; end
  def pundit_user; end
  def skip_authorization; end
  def skip_policy_scope; end
  def verify_authorized; end
  def verify_policy_scoped; end
  extend ActiveSupport::Concern
end
class Pundit::Context
  def authorize(possibly_namespaced_record, query:, policy_class:); end
  def cached_find(record); end
  def initialize(user:, policy_cache: nil); end
  def policy!(record); end
  def policy(record); end
  def policy_cache; end
  def policy_finder(record); end
  def policy_scope!(scope); end
  def policy_scope(scope); end
  def pundit_model(record); end
  def user; end
end
module Pundit::CacheStore
end
class Pundit::CacheStore::NullStore
  def fetch(*, **); end
  def self.instance; end
end
class Pundit::CacheStore::LegacyStore
  def fetch(user:, record:); end
  def initialize(hash = nil); end
end
class Pundit::Error < StandardError
end
module Pundit::Generators
end
class Pundit::NotAuthorizedError < Pundit::Error
  def initialize(options = nil); end
  def policy; end
  def query; end
  def record; end
end
class Pundit::InvalidConstructorError < Pundit::Error
end
class Pundit::AuthorizationNotPerformedError < Pundit::Error
end
class Pundit::PolicyScopingNotPerformedError < Pundit::AuthorizationNotPerformedError
end
class Pundit::NotDefinedError < Pundit::Error
end
module Pundit::Helper
  def policy_scope(scope); end
end
