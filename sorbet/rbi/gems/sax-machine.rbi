# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sax-machine/all/sax-machine.rbi
#
# sax-machine-1.3.2

module SAXMachine
  def parse(xml_input, on_error = nil, on_warning = nil); end
  def self.configure(clazz); end
  def self.handler; end
  def self.handler=(handler); end
  def self.included(base); end
end
module SAXMachine::InstanceMethods
  def initialize(attributes = nil); end
end
module SAXMachine::ClassMethods
  def ancestor(name, options = nil, &block); end
  def attribute(name, options = nil, &block); end
  def column(sym); end
  def column_names; end
  def columns; end
  def create_attr(real_name, &block); end
  def data_class(sym); end
  def element(name, options = nil, &block); end
  def elements(name, options = nil, &block); end
  def inherited(subclass); end
  def parse(*args); end
  def required?(sym); end
  def sax_config; end
  def value(name, options = nil, &block); end
end
module SAXMachine::LightWeightSaxMachine
  def inherited(subclass); end
  def sax_config; end
  def sax_config=(arg0); end
end
class SAXMachine::SAXConfig
  def add_ancestor(name, options); end
  def add_collection_element(name, options); end
  def add_top_level_attribute(name, options); end
  def add_top_level_element(name, options); end
  def add_top_level_element_value(name, options); end
  def ancestors; end
  def ancestors=(arg0); end
  def attribute_configs_for_element(attrs); end
  def collection_config(name, attrs); end
  def collection_elements; end
  def collection_elements=(arg0); end
  def columns; end
  def element_config_for_tag(name, attrs); end
  def element_configs_for_attribute(name, attrs); end
  def element_values_for_element; end
  def initialize; end
  def initialize_copy(sax_config); end
  def top_level_attributes; end
  def top_level_attributes=(arg0); end
  def top_level_element_value; end
  def top_level_element_value=(arg0); end
  def top_level_elements; end
  def top_level_elements=(arg0); end
end
class SAXMachine::SAXConfig::ElementValueConfig
  def column; end
  def data_class; end
  def initialize(name, options); end
  def name; end
  def required?; end
  def setter; end
end
class SAXMachine::SAXConfig::AttributeConfig < SAXMachine::SAXConfig::ElementValueConfig
  def attrs_match?(attrs); end
  def collection?; end
  def has_value_and_attrs_match?(attrs); end
  def value_from_attrs(attrs); end
end
class SAXMachine::SAXConfig::ElementConfig
  def as; end
  def attrs_match?(attrs); end
  def collection; end
  def collection?; end
  def column; end
  def data_class; end
  def default; end
  def has_value_and_attrs_match?(attrs); end
  def initialize(name, options); end
  def name; end
  def required?; end
  def setter; end
  def to_s; end
  def value_configured?; end
  def value_from_attrs(attrs); end
end
class SAXMachine::SAXConfig::CollectionConfig
  def accessor; end
  def as; end
  def attrs_match?(attrs); end
  def data_class; end
  def initialize(name, options); end
  def name; end
end
class SAXMachine::SAXConfig::AncestorConfig
  def column; end
  def initialize(name, options); end
  def name; end
  def setter; end
end
module SAXMachine::SAXAbstractHandler
  def _characters(data); end
  def _end_element(name); end
  def _error(string); end
  def _initialize(object, on_error = nil, on_warning = nil); end
  def _start_element(name, attrs = nil); end
  def _warning(string); end
  def data_class_value(data_class, value); end
  def element_values_for(config); end
  def mark_as_parsed(object, element_config); end
  def normalize_name(name); end
  def parsed_config?(object, element_config); end
  def sax_config_for(object); end
  def sax_parse(xml_input); end
  def set_attributes_on(object, attributes); end
  def stack; end
end
class Anonymous_Struct_87 < Struct
  def buffer; end
  def buffer=(_); end
  def config; end
  def config=(_); end
  def object; end
  def object=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class SAXMachine::SAXAbstractHandler::StackNode < Anonymous_Struct_87
  def initialize(object, config = nil, buffer = nil); end
end
class SAXMachine::SAXNokogiriHandler < Nokogiri::XML::SAX::Document
  def cdata_block(data); end
  def characters(data); end
  def end_element(name); end
  def error(string); end
  def initialize(object, on_error = nil, on_warning = nil); end
  def sax_parse(xml_input); end
  def start_element(name, attrs = nil); end
  def warning(string); end
  include SAXMachine::SAXAbstractHandler
end
