# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cloudinary/all/cloudinary.rbi
#
# cloudinary-2.0.2

module Cloudinary
  def self.USER_AGENT; end
  def self.account_config(new_config = nil); end
  def self.app_root; end
  def self.config(new_config = nil); end
  def self.config_dir; end
  def self.config_env; end
  def self.config_from_account_url(url); end
  def self.config_from_url(url); end
  def self.import_settings_from_file; end
  def self.make_new_config(config_module); end
  def self.set_config(new_config); end
  def self.user_platform; end
  def self.user_platform=(value); end
end
class CloudinaryException < StandardError
end
module CloudinaryHelper
  def build_callback_url(options); end
  def cl_blank; end
  def cl_client_hints_meta_tag; end
  def cl_download_archive_url(options = nil); end
  def cl_download_zip_url(options = nil); end
  def cl_form_tag(callback_url, options = nil, &block); end
  def cl_image_path(source, options = nil); end
  def cl_image_tag(source, options = nil); end
  def cl_image_upload(object_name, method, options = nil); end
  def cl_image_upload_tag(field, options = nil); end
  def cl_path(source, options = nil); end
  def cl_picture_tag(source, options = nil, sources = nil); end
  def cl_private_download_url(public_id, format, options = nil); end
  def cl_signed_download_url(public_id, options = nil); end
  def cl_source_tag(source, options); end
  def cl_sprite_tag(source, options = nil); end
  def cl_sprite_url(source, options = nil); end
  def cl_unsigned_image_upload(object_name, method, upload_preset, options = nil); end
  def cl_unsigned_image_upload_tag(field, upload_preset, options = nil); end
  def cl_unsigned_upload(object_name, method, upload_preset, options = nil); end
  def cl_unsigned_upload_tag(field, upload_preset, options = nil); end
  def cl_upload(object_name, method, options = nil); end
  def cl_upload_tag(field, options = nil); end
  def cl_upload_tag_params(options = nil); end
  def cl_upload_url(options = nil); end
  def cl_video_path(source, options = nil); end
  def cl_video_tag(source, options = nil, &block); end
  def cl_video_thumbnail_path(source, options = nil); end
  def cl_video_thumbnail_tag(source, options = nil); end
  def cloudinary_js_config; end
  def cloudinary_tag(source, options = nil); end
  def cloudinary_url(source, options = nil); end
  def cloudinary_url_internal(source, options = nil); end
  def facebook_profile_image_path(profile, options = nil); end
  def facebook_profile_image_tag(profile, options = nil); end
  def fetch_image_tag(profile, options = nil); end
  def generate_tag_from_sources(params); end
  def gplus_profile_image_path(profile, options = nil); end
  def gplus_profile_image_tag(profile, options = nil); end
  def gravatar_profile_image_path(email, options = nil); end
  def gravatar_profile_image_tag(email, options = nil); end
  def image_path_with_cloudinary(*args); end
  def image_tag_with_cloudinary(*args); end
  def self.included(base); end
  def strip_known_ext(name); end
  def twitter_name_profile_image_path(profile, options = nil); end
  def twitter_name_profile_image_tag(profile, options = nil); end
  def twitter_profile_image_path(profile, options = nil); end
  def twitter_profile_image_tag(profile, options = nil); end
  def video_tag_from_source_types(source_name, options, video_options, fallback); end
  def video_tag_from_sources(source_name, options, video_options, fallback); end
  include ActionView::Helpers::CaptureHelper
  include ActionView::Helpers::CaptureHelper
  include Responsive
end
module Responsive
  def generate_breakpoints(srcset); end
  def generate_image_responsive_attributes(public_id, attributes = nil, srcset_data = nil, options = nil); end
  def generate_media_attribute(options); end
  def generate_scaled_url(public_id, width, transformation = nil, options = nil); end
  def generate_sizes_attribute(breakpoints); end
  def generate_srcset_attribute(public_id, breakpoints, transformation = nil, options = nil); end
  def get_or_generate_breakpoints(public_id, srcset, options); end
end
module Cloudinary::FormBuilder
  def cl_image_upload(method, options = nil); end
  def cl_unsigned_image_upload(method, upload_preset, options = nil); end
  def cl_unsigned_upload(method, upload_preset, options = nil); end
  def cl_upload(method, options = nil); end
end
module ActionView::Helpers::AssetUrlHelper
  def original_path_to_asset(source, options = nil); end
end
module Cloudinary::CloudinaryController
  def valid_cloudinary_response?; end
end
class Cloudinary::Railtie < Rails::Railtie
end
class Cloudinary::Engine < Rails::Engine
end
module Cloudinary::BaseConfig
end
module Cloudinary::Config
  include Cloudinary::BaseConfig
end
module ActiveStorage
end
class ActiveStorage::BlobKey < String
end
class ActiveStorage::Blob < ActiveStorage::Record
end
class ActiveStorage::Service::CloudinaryService < ActiveStorage::Service
end
module ActiveStorage::Service::CloudinaryService::Headers
end
